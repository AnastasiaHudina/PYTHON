ЗАДАНИЕ 1

def fib(n):
    if n in (1, 2):
        return 1
    return fib(n - 1) + fib(n - 2)
print(fib(3))

ЗАДАНИЕ 2

O(n^2) (на каждом этапе выполнения функции n будет вызываться дважды)

ЗАДАНИЕ 3

def Fib_memoisation(n, memo):
    if n <= 0:
        return 'ВВЕДИТЕ ЧИСЛО БОЛЬШЕ 0'
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        if n not in memo:
            memo[n] = Fib_memoisation(n - 1, memo) + Fib_memoisation(n - 2, memo)
        return memo[n]

ЗАДАНИЕ 4

O(n * log10n)

ЗАДАНИЕ 5

def fib_for(n):
    n1 = 0
    n2 = 1
    if n <= 0:
        return 'Введите число больше 0'
    elif n == 1:
        return n1
    elif n == 2:
        return n2
    else:
        for i in range(2, n):
            n1, n2 = n2, n1 + n2
        return n2

ЗАДАНИЕ 6

import timeit 
start_time = timeit.default_timer() 
#интерполяционный поиск
def InterpolationSearch(lys, val):
    low = 0
    high = (len(lys) - 1)
    while low <= high and val >= lys[low] and val <= lys[high]:
        index = low + int(((float(high - low) / ( lys[high] - lys[low])) * ( val - lys[low])))
        if lys[index] == val:
            return index
        if lys[index] < val:
            low = index + 1;
        else:
            high = index - 1;
    return -1
print(InterpolationSearch([1,2,3,4,5,6,7,8], 6))
print(InterpolationSearch([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], 10))
time_1 = timeit.default_timer() - start_time 
start_time = timeit.default_timer() 
#бинарный поиск
def BinarySearch(lys, val):
    first = 0
    last = len(lys)-1
    index = -1
    while (first <= last) and (index == -1):
        mid = (first+last)//2
        if lys[mid] == val:
            index = mid
        else:
            if val<lys[mid]:
                last = mid -1
            else:
                first = mid +1
    return index
print(BinarySearch([1,2,3,4,5,6,7,8], 6))
print(BinarySearch([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], 10))
time_2 = timeit.default_timer() - start_time 
print('Function 1 took', time_1) 
print('Function 2 took', time_2)
